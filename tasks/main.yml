---

- name: Install Remi repo
  ansible.builtin.dnf:
    name: "https://rpms.remirepo.net/enterprise/remi-release-{{ ansible_distribution_major_version }}.rpm"
    state: present
  tags:
    - "install"
    - "reqs"

- name: Reset PHP module
  ansible.builtin.command: dnf -y module reset php
  changed_when: false
  tags:
    - "install"
    - "reqs"

- name: Enable Remi PHP {{ nextcloud_php_version }}
  ansible.builtin.command: "dnf -y module enable php:remi-{{ nextcloud_php_version }}"
  changed_when: false
  tags:
    - "install"
    - "reqs"

- name: Install RPM Fusion
  ansible.builtin.dnf:
    name:
      - "https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm"
      - "https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-{{ ansible_distribution_major_version }}.noarch.rpm"
    state: present
    disable_gpg_check: true
  tags:
    - "install"
    - "reqs"

- name: Enable powertools
  ansible.builtin.command: "dnf config-manager --enable powertools"
  changed_when: false
  tags:
    - "install"
    - "reqs"

- name: Install packages
  ansible.builtin.dnf:
    name: "{{ nextcloud_requirements }}"
    state: present
  tags:
    - "install"
    - "reqs"

- name: Install redis
  ansible.builtin.dnf:
    name: redis
    state: present
  notify: Enable and start redis
  tags:
    - "install"
    - "reqs"
    - "redis"

- name: Enable and start apache
  ansible.builtin.systemd:
    name: httpd
    state: started
    enabled: true
  tags: ["apache"]

- name: Check if Nextcloud is already installed
  ansible.builtin.stat:
    path: /var/www/html/nextcloud/version.php
  register: __nc_version
  tags:
    - "install"
    - "download"

- name: Include install tasks
  ansible.builtin.include_tasks:
    file: install.yml
    apply:
      tags: ["install"]
  when: nextcloud_force_install | bool or not __nc_version.stat.exists
  tags: ["install"]

- name: Set /var/www/html ownership
  ansible.builtin.file:
    path: /var/www/html
    state: directory
    recurse: true
    owner: apache
    group: apache
  tags: ["owner"]

- name: Fix SELinux
  when: ansible_selinux.status == "enabled"
  tags: ["owner"]
  block:
    - name: Set SELinux contexts
      community.general.sefcontext:
        target: "{{ item }}"
        setype: httpd_sys_rw_content_t
        state: present
      loop:
        - '/var/www/html/nextcloud/data(/.*)?'
        - '/var/www/html/nextcloud/config(/.*)?'
        - '/var/www/html/nextcloud/apps(/.*)?'
        - '/var/www/html/nextcloud/.htaccess'
        - '/var/www/html/nextcloud/.user.ini'
        - '/var/www/html/nextcloud/3rdparty/aws/aws-sdk-php/src/data/logs(/.*)?'

    - name: Restore SELinux contexts  # noqa no-changed-when - verbose is slower, whatever
      ansible.builtin.command: restorecon -r /var/www/html/nextcloud

    - name: Enable httpd_can_network_connect
      ansible.posix.seboolean:
        name: httpd_can_network_connect
        state: true
        persistent: true

- name: Enable Apache2 modules
  community.general.apache2_module:
    name: "{{ item }}"
    state: present
  loop: "{{ nextcloud_apache_modules }}"
  tags: ["apache"]

- name: Copy Apache config
  ansible.builtin.template:
    src: nextcloud.conf.j2
    dest: /etc/httpd/conf.d/nextcloud.conf
    owner: root
    group: root
    mode: "0644"
  notify: Restart apache
  tags: ["apache"]

- name: Configure SSL
  ansible.builtin.include_tasks:
    file: ssl.yml
    apply:
      tags: ["apache", "ssl"]
  when: nextcloud_generate_certificate | bool
  tags: ["apache", "ssl"]

- name: Copy initial nextcloud config
  ansible.builtin.template:
    src: config.php.j2
    dest: /var/www/html/nextcloud/config/config.php
    force: "{{ nextcloud_config_overwrite | bool }}"
    owner: apache
    group: apache
    mode: "0640"
  tags: ["configure"]

- name: Enable ACPu CLI
  ansible.builtin.lineinfile:
    dest: "/etc/php.d/40-apcu.ini"
    regexp: '^;?apc.enable_cli\s*='
    line: "apc.enable_cli=1"
    state: present
  notify:
    - Restart apache
    - Restart php-fpm
  tags: ["php"]

- name: Configure php-fpm
  ansible.builtin.lineinfile:
    dest: "/etc/php-fpm.d/www.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  loop: "{{ nextcloud_php_fpm_config | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.line }}"
  notify:
    - Restart apache
    - Restart php-fpm
  tags: ["php", "php-fpm"]
  when: nextcloud_config_php_fpm | bool

- name: Configure opcache
  ansible.builtin.lineinfile:
    dest: "/etc/php.d/10-opcache.ini"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - regexp: '^;?opcache.enable\s*='
      line: 'opcache.enable=1'
    - regexp: '^;?opcache.interned_strings_buffer\s*='
      line: 'opcache.interned_strings_buffer=8'
    - regexp: '^;?opcache.max_accelerated_files\s*='
      line: 'opcache.max_accelerated_files=10000'
    - regexp: '^;?opcache.memory_consumption\s*='
      line: 'opcache.memory_consumption=128'
    - regexp: '^;opcache.save_comments\s*='
      line: 'opcache.save_comments=1'
    - regexp: '^;?opcache.revalidate_freq\s*='
      line: 'opcache.revalidate_freq=1'
  loop_control:
    label: "{{ item.line }}"
  notify:
    - Restart apache
    - Restart php-fpm
  tags: ["php"]

- name: Configure php.ini
  ansible.builtin.lineinfile:
    dest: "/etc/php.ini"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  loop: "{{ nextcloud_php_config | flatten(levels=1) }}"
  loop_control:
    label: "{{ item.line }}"
  notify:
    - Restart apache
    - Restart php-fpm
  tags: ["php"]

- name: Install Nextcloud cron jobs
  ansible.builtin.copy:
    src: "nextcloud-cron.{{ item }}"
    dest: "/etc/systemd/system/nextcloud-cron.{{ item }}"
    owner: root
    group: root
    mode: "0644"
  notify: Enable and start nextcloud cron timer
  loop:
    - service
    - timer
  tags: ["cron"]
